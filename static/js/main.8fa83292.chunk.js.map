{"version":3,"sources":["Algorithms/merge.js","Algorithms/quick.js","Algorithms/heap.js","Algorithms/bubble.js","Algorithms/selection.js","Algorithms/insertion.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["mergeSort","mainArray","start","end","auxiliary","animations","middle","Math","floor","doMerge","main","k","i","j","push","mergeSortHelper","array","length","auxiliaryArray","slice","getMergeSortAnimations","arraybars","document","getElementsByClassName","baroneIDx","bartwoIDx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","backGroundColor","newHeight","height","partition","arr","a","pivotIndex","pivotValue","swap","getElementById","one","two","sleep","temp","tempHeight","quickSort","index","time","Promise","resolve","heapSortHelper","buildMaxHeap","maxHeapify","right","size","l","r","largest","bubbleSortHelper","swapped","selectionSortHelper","insertionSortHelper","SortingVisualiser","props","state","heapSort","bubbleSort","selectionSort","insertionSort","this","resetArray","min","max","random","setState","className","map","value","id","key","onClick","React","Component","App","SortingVisualizer","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fa83292.chunk.js","sourcesContent":["const getMergeSortAnimations = (array) => {\n    const animations = [];\n    if(array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nconst mergeSort = (mainArray, start, end, auxiliary, animations) => {\n    if(start === end) return;\n    const middle = Math.floor((start + end) / 2);\n    mergeSort(auxiliary, start, middle, mainArray, animations);\n    mergeSort(auxiliary, middle + 1, end, mainArray, animations);\n    doMerge(mainArray, start, middle, end, auxiliary, animations);\n}\n\nconst doMerge = (main, start, middle, end, auxiliary, animations) => {\n    let k = start;\n    let i = start;\n    let j = middle + 1\n\n    while(i <= middle && j <= end) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if(auxiliary[i] <= auxiliary[j]) {\n            animations.push([k, auxiliary[i]]);\n            main[k++] = auxiliary[i++];\n        } else {\n            animations.push([k, auxiliary[j]]);\n            main[k++] = auxiliary[j++];\n        }\n    }\n    while(i <= middle) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([k, auxiliary[i]]);\n        main[k++] = auxiliary[i++];\n    }\n    while(j <= end) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([k, auxiliary[j]]);\n        main[k++] = auxiliary[j++];\n    }\n}\n\nexport const mergeSortHelper = array => {\n    const animations = getMergeSortAnimations(array);\n    for(let i=0; i<animations.length; i++) {\n        const arraybars = document.getElementsByClassName('array-bar');\n        const isColorChange = i%3 !== 2;\n        if(isColorChange) {\n            const [baroneIDx, bartwoIDx] = animations[i];\n            const barOneStyle = arraybars[baroneIDx].style;\n            const barTwoStyle = arraybars[bartwoIDx].style;\n            const color = i%3 === 0 ? 'red' : 'turquoise';\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backGroundColor = color;\n            }, i * 3);\n        } else {\n            setTimeout(() => {\n                const [baroneIDx, newHeight] = animations[i];\n                const barOneStyle = arraybars[baroneIDx].style;\n                barOneStyle.height = `${newHeight}px`; \n            }, i * 3);\n        }\n    }\n}","async function partition(arr, start, end) {\n    let pivotIndex = start;\n    let pivotValue = arr[end];\n    for(let i=start; i<end; i++) {\n        if(arr[i] < pivotValue) {\n            await swap(arr, i, pivotIndex);\n            pivotIndex++;\n        }\n    }\n    await swap(arr, pivotIndex, end);\n    document.getElementById(`${pivotIndex}`).style.backgroundColor = 'red';\n    return pivotIndex;\n}\n\nasync function swap(arr, i, j) {\n    let one = document.getElementById(`${i}`);\n    let two = document.getElementById(`${j}`);\n    one.style.backgroundColor = 'green';\n    two.style.backgroundColor = 'green';\n    \n    await sleep(50);\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    await sleep(50);\n\n    let tempHeight = one.style.height;\n    one.style.height = two.style.height;\n    two.style.height = tempHeight;\n\n    one.style.backgroundColor = 'turquoise';\n    two.style.backgroundColor = 'turquoise';\n}\n\nasync function quickSort(arr, start, end) {\n    if (start >= end) return;\n\n    let index = await partition(arr, start, end);\n    await sleep(300)\n    document.getElementById(`${index}`).style.backgroundColor = 'turquoise';\n    await quickSort(arr, start, index - 1);\n    await quickSort(arr, index + 1, end);\n}\n\nexport function quickSortHelper(array) {\n    quickSort(array, 0, array.length - 1);\n}\n\nfunction sleep(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n}\n","export const heapSortHelper = async (array) => {\n    await buildMaxHeap(array);\n    for(let i=array.length - 1; i >= 0; i--) {\n        await swap(array, i, 0);\n        await maxHeapify(array, 0, i);\n    }\n}\n\nconst parent = i => Math.floor(i / 2);\nconst left = i => 2 * i + 1;\nconst right = i => 2 * i + 2;\n\nconst buildMaxHeap = async arr => {\n    let length = arr.length;\n    let start = parent(length - 1);\n\n    while(start >= 0) {\n        await maxHeapify(arr, start, length);\n        start -= 1;\n    }\n}\n\nconst maxHeapify = async (arr, index, size) => {\n    let l = left(index);\n    let r = right(index);\n    let largest;\n    if(l < size && arr[l] > arr[index]) \n        largest = l;\n    else \n        largest = index;\n    if(r < size && arr[r] > arr[largest])\n        largest = r;\n    if(largest !== index) {\n        await swap(arr, largest, index);\n        await maxHeapify(arr, largest, size);\n    }\n}\n\nasync function swap(arr, i, j) {\n    let one = document.getElementById(`${i}`);\n    let two = document.getElementById(`${j}`);\n    one.style.backgroundColor = 'green';\n    two.style.backgroundColor = 'green';\n    \n    await sleep(20);\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    await sleep(20);\n\n    let tempHeight = one.style.height;\n    one.style.height = two.style.height;\n    two.style.height = tempHeight;\n\n    one.style.backgroundColor = 'turquoise';\n    two.style.backgroundColor = 'turquoise';\n}\n\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time));","export const bubbleSortHelper = async array => {\n    for (let j=0; j<array.length; j++) {\n        let swapped = false;\n        let i = 0;\n        while(i < array.length - 1) {\n            //Comparing the adjacent elements\n            if(array[i] > array[i+1]) {\n                await swap(array, i, i+1);\n                swapped = true;\n            }\n            i++;\n        }\n        if(swapped === false) {\n            break;\n        }\n    }\n}\n\nasync function swap(arr, i, j) {\n    let one = document.getElementById(`${i}`);\n    let two = document.getElementById(`${j}`);\n    one.style.backgroundColor = 'green';\n    two.style.backgroundColor = 'green';\n    \n    await sleep(2);\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    await sleep(2);\n\n    let tempHeight = one.style.height;\n    one.style.height = two.style.height;\n    two.style.height = tempHeight;\n\n    one.style.backgroundColor = 'turquoise';\n    two.style.backgroundColor = 'turquoise';\n}\n\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time));","export const selectionSortHelper = async array => {\n    for(let i = 0; i < array.length; i++) {\n        for(let j = i+1; j < array.length; j++) {\n            if(array[j] < array[i]) {\n                await swap(array, i, j);\n            }\n        }\n    }\n}\n\nasync function swap(arr, i, j) {\n    let one = document.getElementById(`${i}`);\n    let two = document.getElementById(`${j}`);\n    one.style.backgroundColor = 'green';\n    two.style.backgroundColor = 'green';\n    \n    await sleep(3);\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    await sleep(3);\n\n    let tempHeight = one.style.height;\n    one.style.height = two.style.height;\n    two.style.height = tempHeight;\n\n    one.style.backgroundColor = 'turquoise';\n    two.style.backgroundColor = 'turquoise';\n}\n\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time));","export const insertionSortHelper = async array => {\n    for(let i = 0; i < array.length; i++) {\n        let j = i + 1\n        while(j > 0) {\n            //not in order\n            if (array[j - 1] > array[j]) {\n                await swap(array, j-1, j);\n            } else {\n                //in order\n                break;\n            }\n            j -= 1\n        }\n    }\n}\n\nasync function swap(arr, i, j) {\n    let one = document.getElementById(`${i}`);\n    let two = document.getElementById(`${j}`);\n    one.style.backgroundColor = 'green';\n    two.style.backgroundColor = 'red';\n    \n    await sleep(3);\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    await sleep(3);\n\n    let tempHeight = one.style.height;\n    one.style.height = two.style.height;\n    two.style.height = tempHeight;\n\n    one.style.backgroundColor = 'turquoise';\n    two.style.backgroundColor = 'turquoise';\n}\n\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time));","import React from 'react';\nimport { mergeSortHelper } from './Algorithms/merge'\nimport { quickSortHelper } from './Algorithms/quick'\nimport { heapSortHelper } from './Algorithms/heap'\nimport { bubbleSortHelper } from './Algorithms/bubble';\nimport { selectionSortHelper } from './Algorithms/selection';\nimport { insertionSortHelper } from './Algorithms/insertion';\n\nconst NUMBER_OF_ARRAY_BARS = 200;\n\nclass SortingVisualiser extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {\n            array: []\n        }\n\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = []\n        for(let i=0; i<NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 600));        \n        }\n\n        this.setState({array});\n    }\n\n    mergeSort = () => {\n        mergeSortHelper(this.state.array);\n    }\n\n    quickSort = () => {\n        quickSortHelper(this.state.array);\n    }\n\n    heapSort = () => {\n        heapSortHelper(this.state.array)\n    }\n\n    bubbleSort = () => {\n        bubbleSortHelper(this.state.array);\n    }\n\n    selectionSort = () => {\n        selectionSortHelper(this.state.array);\n    }\n\n    insertionSort = () => {\n        insertionSortHelper(this.state.array);\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div>\n                <div className='array-container'>\n                    {array.map((value, id) => (\n                        <div className='array-bar'\n                            key={id}\n                            id={`${id}`} \n                            style={{\n                                backgroundColor: 'turquoise',\n                                height: `${value}px`\n                            }}></div>\n                    ))}\n                </div>\n                <div className='buttons'>\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                    <button onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button onClick={() => this.insertionSort()}>Insertion Sort</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n//Random number Generator between min and max value.\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualiser;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}